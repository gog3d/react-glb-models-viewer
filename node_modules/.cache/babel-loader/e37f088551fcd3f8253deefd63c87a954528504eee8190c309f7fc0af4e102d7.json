{"ast":null,"code":"import * as React from 'react';\nimport { useThree, useFrame, createPortal } from '@react-three/fiber';\nimport { Object3D, Matrix4, Quaternion, Vector3, Scene } from 'three';\nimport { OrthographicCamera } from './OrthographicCamera.js';\nimport { useCamera } from './useCamera.js';\nconst Context = /*#__PURE__*/React.createContext({});\nconst useGizmoContext = () => {\n  return React.useContext(Context);\n};\nconst turnRate = 2 * Math.PI; // turn rate in angles per second\n\nconst dummy = new Object3D();\nconst matrix = new Matrix4();\nconst [q1, q2] = [new Quaternion(), new Quaternion()];\nconst target = new Vector3();\nconst targetPosition = new Vector3();\nconst isOrbitControls = controls => {\n  return 'minPolarAngle' in controls;\n};\nconst GizmoHelper = _ref => {\n  let {\n    alignment = 'bottom-right',\n    margin = [80, 80],\n    renderPriority = 0,\n    autoClear = true,\n    onUpdate,\n    onTarget,\n    children: GizmoHelperComponent\n  } = _ref;\n  const size = useThree(_ref2 => {\n    let {\n      size\n    } = _ref2;\n    return size;\n  });\n  const mainCamera = useThree(_ref3 => {\n    let {\n      camera\n    } = _ref3;\n    return camera;\n  }); // @ts-expect-error new in @react-three/fiber@7.0.5\n\n  const defaultControls = useThree(_ref4 => {\n    let {\n      controls\n    } = _ref4;\n    return controls;\n  });\n  const gl = useThree(_ref5 => {\n    let {\n      gl\n    } = _ref5;\n    return gl;\n  });\n  const scene = useThree(_ref6 => {\n    let {\n      scene\n    } = _ref6;\n    return scene;\n  });\n  const invalidate = useThree(_ref7 => {\n    let {\n      invalidate\n    } = _ref7;\n    return invalidate;\n  });\n  const backgroundRef = React.useRef();\n  const gizmoRef = React.useRef();\n  const virtualCam = React.useRef(null);\n  const [virtualScene] = React.useState(() => new Scene());\n  const animating = React.useRef(false);\n  const radius = React.useRef(0);\n  const focusPoint = React.useRef(new Vector3(0, 0, 0));\n  const defaultUp = React.useRef(new Vector3(0, 0, 0));\n  React.useEffect(() => {\n    defaultUp.current.copy(mainCamera.up);\n  }, [mainCamera]);\n  const tweenCamera = React.useCallback(direction => {\n    animating.current = true;\n    if (defaultControls || onTarget) focusPoint.current = (defaultControls == null ? void 0 : defaultControls.target) || (onTarget == null ? void 0 : onTarget());\n    radius.current = mainCamera.position.distanceTo(target); // Rotate from current camera orientation\n\n    q1.copy(mainCamera.quaternion); // To new current camera orientation\n\n    targetPosition.copy(direction).multiplyScalar(radius.current).add(target);\n    dummy.lookAt(targetPosition);\n    q2.copy(dummy.quaternion);\n    invalidate();\n  }, [defaultControls, mainCamera, onTarget, invalidate]);\n  React.useEffect(() => {\n    if (scene.background) {\n      //Interchange the actual scene background with the virtual scene\n      backgroundRef.current = scene.background;\n      scene.background = null;\n      virtualScene.background = backgroundRef.current;\n    }\n    return () => {\n      // reset on unmount\n      if (backgroundRef.current) scene.background = backgroundRef.current;\n    };\n  }, []);\n  useFrame((_, delta) => {\n    if (virtualCam.current && gizmoRef.current) {\n      var _gizmoRef$current;\n\n      // Animate step\n      if (animating.current) {\n        if (q1.angleTo(q2) < 0.01) {\n          animating.current = false; // Orbit controls uses UP vector as the orbit axes,\n          // so we need to reset it after the animation is done\n          // moving it around for the controls to work correctly\n\n          if (isOrbitControls(defaultControls)) {\n            mainCamera.up.copy(defaultUp.current);\n          }\n        } else {\n          const step = delta * turnRate; // animate position by doing a slerp and then scaling the position on the unit sphere\n\n          q1.rotateTowards(q2, step); // animate orientation\n\n          mainCamera.position.set(0, 0, 1).applyQuaternion(q1).multiplyScalar(radius.current).add(focusPoint.current);\n          mainCamera.up.set(0, 1, 0).applyQuaternion(q1).normalize();\n          mainCamera.quaternion.copy(q1);\n          if (onUpdate) onUpdate();else if (defaultControls) defaultControls.update();\n          invalidate();\n        }\n      } // Sync Gizmo with main camera orientation\n\n      matrix.copy(mainCamera.matrix).invert();\n      (_gizmoRef$current = gizmoRef.current) == null ? void 0 : _gizmoRef$current.quaternion.setFromRotationMatrix(matrix); // Render virtual camera\n\n      if (autoClear) gl.autoClear = false;\n      gl.clearDepth();\n      gl.render(virtualScene, virtualCam.current);\n    }\n  }, renderPriority);\n  const raycast = useCamera(virtualCam);\n  const gizmoHelperContext = React.useMemo(() => ({\n    tweenCamera,\n    raycast\n  }), [tweenCamera]); // Position gizmo component within scene\n\n  const [marginX, marginY] = margin;\n  const x = alignment.endsWith('-center') ? 0 : alignment.endsWith('-left') ? -size.width / 2 + marginX : size.width / 2 - marginX;\n  const y = alignment.startsWith('center-') ? 0 : alignment.startsWith('top-') ? size.height / 2 - marginY : -size.height / 2 + marginY;\n  return createPortal( /*#__PURE__*/React.createElement(Context.Provider, {\n    value: gizmoHelperContext\n  }, /*#__PURE__*/React.createElement(OrthographicCamera, {\n    ref: virtualCam,\n    position: [0, 0, 200]\n  }), /*#__PURE__*/React.createElement(\"group\", {\n    ref: gizmoRef,\n    position: [x, y, 0]\n  }, GizmoHelperComponent)), virtualScene);\n};\nexport { GizmoHelper, useGizmoContext };","map":{"version":3,"names":["React","useThree","useFrame","createPortal","Object3D","Matrix4","Quaternion","Vector3","Scene","OrthographicCamera","useCamera","Context","createContext","useGizmoContext","useContext","turnRate","Math","PI","dummy","matrix","q1","q2","target","targetPosition","isOrbitControls","controls","GizmoHelper","_ref","alignment","margin","renderPriority","autoClear","onUpdate","onTarget","children","GizmoHelperComponent","size","_ref2","mainCamera","_ref3","camera","defaultControls","_ref4","gl","_ref5","scene","_ref6","invalidate","_ref7","backgroundRef","useRef","gizmoRef","virtualCam","virtualScene","useState","animating","radius","focusPoint","defaultUp","useEffect","current","copy","up","tweenCamera","useCallback","direction","position","distanceTo","quaternion","multiplyScalar","add","lookAt","background","_","delta","_gizmoRef$current","angleTo","step","rotateTowards","set","applyQuaternion","normalize","update","invert","setFromRotationMatrix","clearDepth","render","raycast","gizmoHelperContext","useMemo","marginX","marginY","x","endsWith","width","y","startsWith","height","createElement","Provider","value","ref"],"sources":["/home/gog3d/CODE/JS/1-projects/2-react/react-glb-models-viewer/node_modules/@react-three/drei/core/GizmoHelper.js"],"sourcesContent":["import * as React from 'react';\nimport { useThree, useFrame, createPortal } from '@react-three/fiber';\nimport { Object3D, Matrix4, Quaternion, Vector3, Scene } from 'three';\nimport { OrthographicCamera } from './OrthographicCamera.js';\nimport { useCamera } from './useCamera.js';\n\nconst Context = /*#__PURE__*/React.createContext({});\nconst useGizmoContext = () => {\n  return React.useContext(Context);\n};\nconst turnRate = 2 * Math.PI; // turn rate in angles per second\n\nconst dummy = new Object3D();\nconst matrix = new Matrix4();\nconst [q1, q2] = [new Quaternion(), new Quaternion()];\nconst target = new Vector3();\nconst targetPosition = new Vector3();\n\nconst isOrbitControls = controls => {\n  return 'minPolarAngle' in controls;\n};\n\nconst GizmoHelper = ({\n  alignment = 'bottom-right',\n  margin = [80, 80],\n  renderPriority = 0,\n  autoClear = true,\n  onUpdate,\n  onTarget,\n  children: GizmoHelperComponent\n}) => {\n  const size = useThree(({\n    size\n  }) => size);\n  const mainCamera = useThree(({\n    camera\n  }) => camera); // @ts-expect-error new in @react-three/fiber@7.0.5\n\n  const defaultControls = useThree(({\n    controls\n  }) => controls);\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const invalidate = useThree(({\n    invalidate\n  }) => invalidate);\n  const backgroundRef = React.useRef();\n  const gizmoRef = React.useRef();\n  const virtualCam = React.useRef(null);\n  const [virtualScene] = React.useState(() => new Scene());\n  const animating = React.useRef(false);\n  const radius = React.useRef(0);\n  const focusPoint = React.useRef(new Vector3(0, 0, 0));\n  const defaultUp = React.useRef(new Vector3(0, 0, 0));\n  React.useEffect(() => {\n    defaultUp.current.copy(mainCamera.up);\n  }, [mainCamera]);\n  const tweenCamera = React.useCallback(direction => {\n    animating.current = true;\n    if (defaultControls || onTarget) focusPoint.current = (defaultControls == null ? void 0 : defaultControls.target) || (onTarget == null ? void 0 : onTarget());\n    radius.current = mainCamera.position.distanceTo(target); // Rotate from current camera orientation\n\n    q1.copy(mainCamera.quaternion); // To new current camera orientation\n\n    targetPosition.copy(direction).multiplyScalar(radius.current).add(target);\n    dummy.lookAt(targetPosition);\n    q2.copy(dummy.quaternion);\n    invalidate();\n  }, [defaultControls, mainCamera, onTarget, invalidate]);\n  React.useEffect(() => {\n    if (scene.background) {\n      //Interchange the actual scene background with the virtual scene\n      backgroundRef.current = scene.background;\n      scene.background = null;\n      virtualScene.background = backgroundRef.current;\n    }\n\n    return () => {\n      // reset on unmount\n      if (backgroundRef.current) scene.background = backgroundRef.current;\n    };\n  }, []);\n  useFrame((_, delta) => {\n    if (virtualCam.current && gizmoRef.current) {\n      var _gizmoRef$current;\n\n      // Animate step\n      if (animating.current) {\n        if (q1.angleTo(q2) < 0.01) {\n          animating.current = false; // Orbit controls uses UP vector as the orbit axes,\n          // so we need to reset it after the animation is done\n          // moving it around for the controls to work correctly\n\n          if (isOrbitControls(defaultControls)) {\n            mainCamera.up.copy(defaultUp.current);\n          }\n        } else {\n          const step = delta * turnRate; // animate position by doing a slerp and then scaling the position on the unit sphere\n\n          q1.rotateTowards(q2, step); // animate orientation\n\n          mainCamera.position.set(0, 0, 1).applyQuaternion(q1).multiplyScalar(radius.current).add(focusPoint.current);\n          mainCamera.up.set(0, 1, 0).applyQuaternion(q1).normalize();\n          mainCamera.quaternion.copy(q1);\n          if (onUpdate) onUpdate();else if (defaultControls) defaultControls.update();\n          invalidate();\n        }\n      } // Sync Gizmo with main camera orientation\n\n\n      matrix.copy(mainCamera.matrix).invert();\n      (_gizmoRef$current = gizmoRef.current) == null ? void 0 : _gizmoRef$current.quaternion.setFromRotationMatrix(matrix); // Render virtual camera\n\n      if (autoClear) gl.autoClear = false;\n      gl.clearDepth();\n      gl.render(virtualScene, virtualCam.current);\n    }\n  }, renderPriority);\n  const raycast = useCamera(virtualCam);\n  const gizmoHelperContext = React.useMemo(() => ({\n    tweenCamera,\n    raycast\n  }), [tweenCamera]); // Position gizmo component within scene\n\n  const [marginX, marginY] = margin;\n  const x = alignment.endsWith('-center') ? 0 : alignment.endsWith('-left') ? -size.width / 2 + marginX : size.width / 2 - marginX;\n  const y = alignment.startsWith('center-') ? 0 : alignment.startsWith('top-') ? size.height / 2 - marginY : -size.height / 2 + marginY;\n  return createPortal( /*#__PURE__*/React.createElement(Context.Provider, {\n    value: gizmoHelperContext\n  }, /*#__PURE__*/React.createElement(OrthographicCamera, {\n    ref: virtualCam,\n    position: [0, 0, 200]\n  }), /*#__PURE__*/React.createElement(\"group\", {\n    ref: gizmoRef,\n    position: [x, y, 0]\n  }, GizmoHelperComponent)), virtualScene);\n};\n\nexport { GizmoHelper, useGizmoContext };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}