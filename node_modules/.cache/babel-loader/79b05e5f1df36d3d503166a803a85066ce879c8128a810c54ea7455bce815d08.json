{"ast":null,"code":"import { SRGBColorSpace, LinearSRGBColorSpace, DisplayP3ColorSpace } from '../constants.js';\nimport { Matrix3 } from './Matrix3.js';\nexport function SRGBToLinear(c) {\n  return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\n}\nexport function LinearToSRGB(c) {\n  return c < 0.0031308 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;\n}\n\n/**\n * Matrices converting P3 <-> Rec. 709 primaries, without gamut mapping\n * or clipping. Based on W3C specifications for sRGB and Display P3,\n * and ICC specifications for the D50 connection space. Values in/out\n * are _linear_ sRGB and _linear_ Display P3.\n *\n * Note that both sRGB and Display P3 use the sRGB transfer functions.\n *\n * Reference:\n * - http://www.russellcottrell.com/photo/matrixCalculator.htm\n */\n\nconst LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = /*@__PURE__*/new Matrix3().fromArray([0.8224621, 0.0331941, 0.0170827, 0.1775380, 0.9668058, 0.0723974, -0.0000001, 0.0000001, 0.9105199]);\nconst LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = /*@__PURE__*/new Matrix3().fromArray([1.2249401, -0.0420569, -0.0196376, -0.2249404, 1.0420571, -0.0786361, 0.0000001, 0.0000000, 1.0982735]);\nfunction DisplayP3ToLinearSRGB(color) {\n  // Display P3 uses the sRGB transfer functions\n  return color.convertSRGBToLinear().applyMatrix3(LINEAR_DISPLAY_P3_TO_LINEAR_SRGB);\n}\nfunction LinearSRGBToDisplayP3(color) {\n  // Display P3 uses the sRGB transfer functions\n  return color.applyMatrix3(LINEAR_SRGB_TO_LINEAR_DISPLAY_P3).convertLinearToSRGB();\n}\n\n// Conversions from <source> to Linear-sRGB reference space.\nconst TO_LINEAR = {\n  [LinearSRGBColorSpace]: color => color,\n  [SRGBColorSpace]: color => color.convertSRGBToLinear(),\n  [DisplayP3ColorSpace]: DisplayP3ToLinearSRGB\n};\n\n// Conversions to <target> from Linear-sRGB reference space.\nconst FROM_LINEAR = {\n  [LinearSRGBColorSpace]: color => color,\n  [SRGBColorSpace]: color => color.convertLinearToSRGB(),\n  [DisplayP3ColorSpace]: LinearSRGBToDisplayP3\n};\nexport const ColorManagement = {\n  enabled: false,\n  get legacyMode() {\n    console.warn('THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150.');\n    return !this.enabled;\n  },\n  set legacyMode(legacyMode) {\n    console.warn('THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150.');\n    this.enabled = !legacyMode;\n  },\n  get workingColorSpace() {\n    return LinearSRGBColorSpace;\n  },\n  set workingColorSpace(colorSpace) {\n    console.warn('THREE.ColorManagement: .workingColorSpace is readonly.');\n  },\n  convert: function (color, sourceColorSpace, targetColorSpace) {\n    if (this.enabled === false || sourceColorSpace === targetColorSpace || !sourceColorSpace || !targetColorSpace) {\n      return color;\n    }\n    const sourceToLinear = TO_LINEAR[sourceColorSpace];\n    const targetFromLinear = FROM_LINEAR[targetColorSpace];\n    if (sourceToLinear === undefined || targetFromLinear === undefined) {\n      throw new Error(`Unsupported color space conversion, \"${sourceColorSpace}\" to \"${targetColorSpace}\".`);\n    }\n    return targetFromLinear(sourceToLinear(color));\n  },\n  fromWorkingColorSpace: function (color, targetColorSpace) {\n    return this.convert(color, this.workingColorSpace, targetColorSpace);\n  },\n  toWorkingColorSpace: function (color, sourceColorSpace) {\n    return this.convert(color, sourceColorSpace, this.workingColorSpace);\n  }\n};","map":{"version":3,"names":["SRGBColorSpace","LinearSRGBColorSpace","DisplayP3ColorSpace","Matrix3","SRGBToLinear","c","Math","pow","LinearToSRGB","LINEAR_SRGB_TO_LINEAR_DISPLAY_P3","fromArray","LINEAR_DISPLAY_P3_TO_LINEAR_SRGB","DisplayP3ToLinearSRGB","color","convertSRGBToLinear","applyMatrix3","LinearSRGBToDisplayP3","convertLinearToSRGB","TO_LINEAR","FROM_LINEAR","ColorManagement","enabled","legacyMode","console","warn","workingColorSpace","colorSpace","convert","sourceColorSpace","targetColorSpace","sourceToLinear","targetFromLinear","undefined","Error","fromWorkingColorSpace","toWorkingColorSpace"],"sources":["/home/gog3d/CODE/JS/1-projects/2-react/react-glb-models-viewer/node_modules/three/src/math/ColorManagement.js"],"sourcesContent":["import { SRGBColorSpace, LinearSRGBColorSpace, DisplayP3ColorSpace, } from '../constants.js';\nimport { Matrix3 } from './Matrix3.js';\n\nexport function SRGBToLinear( c ) {\n\n\treturn ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\n\n}\n\nexport function LinearToSRGB( c ) {\n\n\treturn ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\n\n}\n\n/**\n * Matrices converting P3 <-> Rec. 709 primaries, without gamut mapping\n * or clipping. Based on W3C specifications for sRGB and Display P3,\n * and ICC specifications for the D50 connection space. Values in/out\n * are _linear_ sRGB and _linear_ Display P3.\n *\n * Note that both sRGB and Display P3 use the sRGB transfer functions.\n *\n * Reference:\n * - http://www.russellcottrell.com/photo/matrixCalculator.htm\n */\n\nconst LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = /*@__PURE__*/ new Matrix3().fromArray( [\n\t0.8224621, 0.0331941, 0.0170827,\n\t0.1775380, 0.9668058, 0.0723974,\n\t- 0.0000001, 0.0000001, 0.9105199\n] );\n\nconst LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = /*@__PURE__*/ new Matrix3().fromArray( [\n\t1.2249401, - 0.0420569, - 0.0196376,\n\t- 0.2249404, 1.0420571, - 0.0786361,\n\t0.0000001, 0.0000000, 1.0982735\n] );\n\nfunction DisplayP3ToLinearSRGB( color ) {\n\n\t// Display P3 uses the sRGB transfer functions\n\treturn color.convertSRGBToLinear().applyMatrix3( LINEAR_DISPLAY_P3_TO_LINEAR_SRGB );\n\n}\n\nfunction LinearSRGBToDisplayP3( color ) {\n\n\t// Display P3 uses the sRGB transfer functions\n\treturn color.applyMatrix3( LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 ).convertLinearToSRGB();\n\n}\n\n// Conversions from <source> to Linear-sRGB reference space.\nconst TO_LINEAR = {\n\t[ LinearSRGBColorSpace ]: ( color ) => color,\n\t[ SRGBColorSpace ]: ( color ) => color.convertSRGBToLinear(),\n\t[ DisplayP3ColorSpace ]: DisplayP3ToLinearSRGB,\n};\n\n// Conversions to <target> from Linear-sRGB reference space.\nconst FROM_LINEAR = {\n\t[ LinearSRGBColorSpace ]: ( color ) => color,\n\t[ SRGBColorSpace ]: ( color ) => color.convertLinearToSRGB(),\n\t[ DisplayP3ColorSpace ]: LinearSRGBToDisplayP3,\n};\n\nexport const ColorManagement = {\n\n\tenabled: false,\n\n\tget legacyMode() {\n\n\t\tconsole.warn( 'THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150.' );\n\n\t\treturn ! this.enabled;\n\n\t},\n\n\tset legacyMode( legacyMode ) {\n\n\t\tconsole.warn( 'THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150.' );\n\n\t\tthis.enabled = ! legacyMode;\n\n\t},\n\n\tget workingColorSpace() {\n\n\t\treturn LinearSRGBColorSpace;\n\n\t},\n\n\tset workingColorSpace( colorSpace ) {\n\n\t\tconsole.warn( 'THREE.ColorManagement: .workingColorSpace is readonly.' );\n\n\t},\n\n\tconvert: function ( color, sourceColorSpace, targetColorSpace ) {\n\n\t\tif ( this.enabled === false || sourceColorSpace === targetColorSpace || ! sourceColorSpace || ! targetColorSpace ) {\n\n\t\t\treturn color;\n\n\t\t}\n\n\t\tconst sourceToLinear = TO_LINEAR[ sourceColorSpace ];\n\t\tconst targetFromLinear = FROM_LINEAR[ targetColorSpace ];\n\n\t\tif ( sourceToLinear === undefined || targetFromLinear === undefined ) {\n\n\t\t\tthrow new Error( `Unsupported color space conversion, \"${ sourceColorSpace }\" to \"${ targetColorSpace }\".` );\n\n\t\t}\n\n\t\treturn targetFromLinear( sourceToLinear( color ) );\n\n\t},\n\n\tfromWorkingColorSpace: function ( color, targetColorSpace ) {\n\n\t\treturn this.convert( color, this.workingColorSpace, targetColorSpace );\n\n\t},\n\n\ttoWorkingColorSpace: function ( color, sourceColorSpace ) {\n\n\t\treturn this.convert( color, sourceColorSpace, this.workingColorSpace );\n\n\t},\n\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}