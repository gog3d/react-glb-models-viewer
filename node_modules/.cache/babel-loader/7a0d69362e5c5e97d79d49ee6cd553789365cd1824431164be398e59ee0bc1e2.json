{"ast":null,"code":"import _classCallCheck from \"/home/gog3d/CODE/JS/1-projects/2-react/react-glb-models-viewer/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/gog3d/CODE/JS/1-projects/2-react/react-glb-models-viewer/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _construct from \"/home/gog3d/CODE/JS/1-projects/2-react/react-glb-models-viewer/node_modules/@babel/runtime/helpers/esm/construct.js\";\nimport _toConsumableArray from \"/home/gog3d/CODE/JS/1-projects/2-react/react-glb-models-viewer/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/home/gog3d/CODE/JS/1-projects/2-react/react-glb-models-viewer/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"/home/gog3d/CODE/JS/1-projects/2-react/react-glb-models-viewer/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"children\", \"temporal\", \"frames\", \"limit\", \"blend\", \"scale\", \"opacity\", \"alphaTest\", \"color\", \"colorBlend\", \"resolution\", \"toneMapped\"],\n  _excluded2 = [\"castShadow\", \"bias\", \"mapSize\", \"size\", \"near\", \"far\", \"frames\", \"position\", \"radius\", \"amount\", \"intensity\", \"ambient\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport { shaderMaterial } from './shaderMaterial.js';\nfunction isLight(object) {\n  return object.isLight;\n}\nfunction isGeometry(object) {\n  return !!object.geometry;\n}\nvar accumulativeContext = /*#__PURE__*/React.createContext(null);\nvar SoftShadowMaterial = shaderMaterial({\n  color: new THREE.Color(),\n  blend: 2.0,\n  alphaTest: 0.75,\n  opacity: 0,\n  map: null\n}, \"varying vec2 vUv;\\n   void main() {\\n     gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);\\n     vUv = uv;\\n   }\", \"varying vec2 vUv;\\n   uniform sampler2D map;\\n   uniform vec3 color;\\n   uniform float opacity;\\n   uniform float alphaTest;\\n   uniform float blend;\\n   void main() {\\n     vec4 sampledDiffuseColor = texture2D(map, vUv);\\n     gl_FragColor = vec4(color * sampledDiffuseColor.r * blend, max(0.0, (1.0 - (sampledDiffuseColor.r + sampledDiffuseColor.g + sampledDiffuseColor.b) / alphaTest)) * opacity);\\n     #include <tonemapping_fragment>\\n     #include <encodings_fragment>\\n   }\");\nvar DiscardMaterial = shaderMaterial({}, 'void main() { gl_Position = vec4((uv - 0.5) * 2.0, 1.0, 1.0); }', 'void main() { discard; }');\nvar AccumulativeShadows = /*#__PURE__*/React.forwardRef(function (_ref, forwardRef) {\n  var children = _ref.children,\n    temporal = _ref.temporal,\n    _ref$frames = _ref.frames,\n    frames = _ref$frames === void 0 ? 40 : _ref$frames,\n    _ref$limit = _ref.limit,\n    limit = _ref$limit === void 0 ? Infinity : _ref$limit,\n    _ref$blend = _ref.blend,\n    blend = _ref$blend === void 0 ? 20 : _ref$blend,\n    _ref$scale = _ref.scale,\n    scale = _ref$scale === void 0 ? 10 : _ref$scale,\n    _ref$opacity = _ref.opacity,\n    opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,\n    _ref$alphaTest = _ref.alphaTest,\n    alphaTest = _ref$alphaTest === void 0 ? 0.75 : _ref$alphaTest,\n    _ref$color = _ref.color,\n    color = _ref$color === void 0 ? 'black' : _ref$color,\n    _ref$colorBlend = _ref.colorBlend,\n    colorBlend = _ref$colorBlend === void 0 ? 2 : _ref$colorBlend,\n    _ref$resolution = _ref.resolution,\n    resolution = _ref$resolution === void 0 ? 1024 : _ref$resolution,\n    _ref$toneMapped = _ref.toneMapped,\n    toneMapped = _ref$toneMapped === void 0 ? true : _ref$toneMapped,\n    props = _objectWithoutProperties(_ref, _excluded);\n  extend({\n    SoftShadowMaterial: SoftShadowMaterial\n  });\n  var gl = useThree(function (state) {\n    return state.gl;\n  });\n  var scene = useThree(function (state) {\n    return state.scene;\n  });\n  var camera = useThree(function (state) {\n    return state.camera;\n  });\n  var gPlane = React.useRef(null);\n  var gLights = React.useRef(null);\n  var _React$useState = React.useState(function () {\n      return new ProgressiveLightMap(gl, scene, resolution);\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    plm = _React$useState2[0];\n  React.useLayoutEffect(function () {\n    plm.configure(gPlane.current);\n  }, []);\n  var api = React.useMemo(function () {\n    return {\n      lights: new Map(),\n      temporal: !!temporal,\n      frames: Math.max(2, frames),\n      blend: Math.max(2, frames === Infinity ? blend : frames),\n      count: 0,\n      getMesh: function getMesh() {\n        return gPlane.current;\n      },\n      reset: function reset() {\n        // Clear buffers, reset opacities, set frame count to 0\n        plm.clear();\n        var material = gPlane.current.material;\n        material.opacity = 0;\n        material.alphaTest = 0;\n        api.count = 0;\n      },\n      update: function update() {\n        var frames = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        // Adapt the opacity-blend ratio to the number of frames\n        var material = gPlane.current.material;\n        if (!api.temporal) {\n          material.opacity = opacity;\n          material.alphaTest = alphaTest;\n        } else {\n          material.opacity = Math.min(opacity, material.opacity + opacity / api.blend);\n          material.alphaTest = Math.min(alphaTest, material.alphaTest + alphaTest / api.blend);\n        } // Switch accumulative lights on\n\n        gLights.current.visible = true; // Collect scene lights and meshes\n\n        plm.prepare(); // Update the lightmap and the accumulative lights\n\n        for (var i = 0; i < frames; i++) {\n          api.lights.forEach(function (light) {\n            return light.update();\n          });\n          plm.update(camera, api.blend);\n        } // Switch lights off\n\n        gLights.current.visible = false; // Restore lights and meshes\n\n        plm.finish();\n      }\n    };\n  }, [plm, camera, scene, temporal, frames, blend, opacity, alphaTest]);\n  React.useLayoutEffect(function () {\n    // Reset internals, buffers, ...\n    api.reset(); // Update lightmap\n\n    if (!api.temporal && api.frames !== Infinity) api.update(api.blend);\n  }); // Expose api, allow children to set itself as the main light source\n\n  React.useImperativeHandle(forwardRef, function () {\n    return api;\n  }, [api]);\n  useFrame(function () {\n    if ((api.temporal || api.frames === Infinity) && api.count < api.frames && api.count < limit) {\n      api.update();\n      api.count++;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", props, /*#__PURE__*/React.createElement(\"group\", {\n    traverse: function traverse() {\n      return null;\n    },\n    ref: gLights\n  }, /*#__PURE__*/React.createElement(accumulativeContext.Provider, {\n    value: api\n  }, children)), /*#__PURE__*/React.createElement(\"mesh\", {\n    receiveShadow: true,\n    ref: gPlane,\n    scale: scale,\n    rotation: [-Math.PI / 2, 0, 0]\n  }, /*#__PURE__*/React.createElement(\"planeGeometry\", null), /*#__PURE__*/React.createElement(\"softShadowMaterial\", {\n    transparent: true,\n    depthWrite: false,\n    toneMapped: toneMapped,\n    color: color,\n    blend: colorBlend,\n    map: plm.progressiveLightMap2.texture\n  })));\n});\nvar RandomizedLight = /*#__PURE__*/React.forwardRef(function (_ref2, forwardRef) {\n  var _ref2$castShadow = _ref2.castShadow,\n    castShadow = _ref2$castShadow === void 0 ? true : _ref2$castShadow,\n    _ref2$bias = _ref2.bias,\n    bias = _ref2$bias === void 0 ? 0.001 : _ref2$bias,\n    _ref2$mapSize = _ref2.mapSize,\n    mapSize = _ref2$mapSize === void 0 ? 512 : _ref2$mapSize,\n    _ref2$size = _ref2.size,\n    size = _ref2$size === void 0 ? 5 : _ref2$size,\n    _ref2$near = _ref2.near,\n    near = _ref2$near === void 0 ? 0.5 : _ref2$near,\n    _ref2$far = _ref2.far,\n    far = _ref2$far === void 0 ? 500 : _ref2$far,\n    _ref2$frames = _ref2.frames,\n    frames = _ref2$frames === void 0 ? 1 : _ref2$frames,\n    _ref2$position = _ref2.position,\n    position = _ref2$position === void 0 ? [0, 0, 0] : _ref2$position,\n    _ref2$radius = _ref2.radius,\n    radius = _ref2$radius === void 0 ? 1 : _ref2$radius,\n    _ref2$amount = _ref2.amount,\n    amount = _ref2$amount === void 0 ? 8 : _ref2$amount,\n    _ref2$intensity = _ref2.intensity,\n    intensity = _ref2$intensity === void 0 ? 1 : _ref2$intensity,\n    _ref2$ambient = _ref2.ambient,\n    ambient = _ref2$ambient === void 0 ? 0.5 : _ref2$ambient,\n    props = _objectWithoutProperties(_ref2, _excluded2);\n  var gLights = React.useRef(null);\n  var length = _construct(THREE.Vector3, _toConsumableArray(position)).length();\n  var parent = React.useContext(accumulativeContext);\n  var update = React.useCallback(function () {\n    var light;\n    if (gLights.current) {\n      for (var l = 0; l < gLights.current.children.length; l++) {\n        light = gLights.current.children[l];\n        if (Math.random() > ambient) {\n          light.position.set(position[0] + THREE.MathUtils.randFloatSpread(radius), position[1] + THREE.MathUtils.randFloatSpread(radius), position[2] + THREE.MathUtils.randFloatSpread(radius));\n        } else {\n          var lambda = Math.acos(2 * Math.random() - 1) - Math.PI / 2.0;\n          var phi = 2 * Math.PI * Math.random();\n          light.position.set(Math.cos(lambda) * Math.cos(phi) * length, Math.abs(Math.cos(lambda) * Math.sin(phi) * length), Math.sin(lambda) * length);\n        }\n      }\n    }\n  }, [radius, ambient, length].concat(_toConsumableArray(position)));\n  var api = React.useMemo(function () {\n    return {\n      update: update\n    };\n  }, [update]);\n  React.useImperativeHandle(forwardRef, function () {\n    return api;\n  }, [api]);\n  React.useLayoutEffect(function () {\n    var group = gLights.current;\n    if (parent) parent.lights.set(group.uuid, api);\n    return function () {\n      return void parent.lights.delete(group.uuid);\n    };\n  }, [parent, api]);\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    ref: gLights\n  }, props), Array.from({\n    length: amount\n  }, function (_, index) {\n    return /*#__PURE__*/React.createElement(\"directionalLight\", {\n      key: index,\n      castShadow: castShadow,\n      \"shadow-bias\": bias,\n      \"shadow-mapSize\": [mapSize, mapSize],\n      intensity: intensity / amount\n    }, /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n      attach: \"shadow-camera\",\n      args: [-size, size, size, -size, near, far]\n    }));\n  }));\n}); // Based on \"Progressive Light Map Accumulator\", by [zalo](https://github.com/zalo/)\nvar ProgressiveLightMap = /*#__PURE__*/function () {\n  function ProgressiveLightMap(renderer, scene) {\n    var _this = this;\n    var res = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1024;\n    _classCallCheck(this, ProgressiveLightMap);\n    this.renderer = renderer;\n    this.res = res;\n    this.scene = scene;\n    this.buffer1Active = false;\n    this.lights = [];\n    this.meshes = [];\n    this.object = null; // Create the Progressive LightMap Texture\n\n    var format = /(Android|iPad|iPhone|iPod)/g.test(navigator.userAgent) ? THREE.HalfFloatType : THREE.FloatType;\n    this.progressiveLightMap1 = new THREE.WebGLRenderTarget(this.res, this.res, {\n      type: format,\n      encoding: renderer.outputEncoding\n    });\n    this.progressiveLightMap2 = new THREE.WebGLRenderTarget(this.res, this.res, {\n      type: format,\n      encoding: renderer.outputEncoding\n    }); // Inject some spicy new logic into a standard phong material\n\n    this.discardMat = new DiscardMaterial();\n    this.targetMat = new THREE.MeshPhongMaterial({\n      shininess: 0,\n      fog: false\n    });\n    this.previousShadowMap = {\n      value: this.progressiveLightMap1.texture\n    };\n    this.averagingWindow = {\n      value: 100\n    };\n    this.targetMat.onBeforeCompile = function (shader) {\n      // Vertex Shader: Set Vertex Positions to the Unwrapped UV Positions\n      shader.vertexShader = 'varying vec2 vUv;\\n' + shader.vertexShader.slice(0, -1) + 'vUv = uv; gl_Position = vec4((uv - 0.5) * 2.0, 1.0, 1.0); }'; // Fragment Shader: Set Pixels to average in the Previous frame's Shadows\n\n      var bodyStart = shader.fragmentShader.indexOf('void main() {');\n      shader.fragmentShader = shader.fragmentShader.replace('#include <clipping_planes_pars_fragment>', '#include <clipping_planes_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n');\n      shader.fragmentShader = 'varying vec2 vUv;\\n' + shader.fragmentShader.slice(0, bodyStart) + '\tuniform sampler2D previousShadowMap;\\n\tuniform float averagingWindow;\\n' + shader.fragmentShader.slice(bodyStart - 1, -1) + \"\\nvec3 texelOld = texture2D(previousShadowMap, vUv).rgb;\\n        gl_FragColor.rgb = mix(texelOld, gl_FragColor.rgb, 1.0/averagingWindow);\\n      }\"; // Set the Previous Frame's Texture Buffer and Averaging Window\n\n      shader.uniforms.previousShadowMap = _this.previousShadowMap;\n      shader.uniforms.averagingWindow = _this.averagingWindow;\n    };\n  }\n  _createClass(ProgressiveLightMap, [{\n    key: \"clear\",\n    value: function clear() {\n      var _this2 = this;\n      this.renderer.setRenderTarget(this.progressiveLightMap1);\n      this.renderer.clear();\n      this.renderer.setRenderTarget(this.progressiveLightMap2);\n      this.renderer.clear();\n      this.lights = [];\n      this.meshes = [];\n      this.scene.traverse(function (object) {\n        if (isGeometry(object)) {\n          _this2.meshes.push({\n            object: object,\n            material: object.material\n          });\n        } else if (isLight(object)) {\n          _this2.lights.push({\n            object: object,\n            intensity: object.intensity\n          });\n        }\n      });\n    }\n  }, {\n    key: \"prepare\",\n    value: function prepare() {\n      var _this3 = this;\n      this.lights.forEach(function (light) {\n        return light.object.intensity = 0;\n      });\n      this.meshes.forEach(function (mesh) {\n        return mesh.object.material = _this3.discardMat;\n      });\n    }\n  }, {\n    key: \"finish\",\n    value: function finish() {\n      this.lights.forEach(function (light) {\n        return light.object.intensity = light.intensity;\n      });\n      this.meshes.forEach(function (mesh) {\n        return mesh.object.material = mesh.material;\n      });\n    }\n  }, {\n    key: \"configure\",\n    value: function configure(object) {\n      this.object = object;\n    }\n  }, {\n    key: \"update\",\n    value: function update(camera) {\n      var blendWindow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n      if (!this.object) return; // Set each object's material to the UV Unwrapped Surface Mapping Version\n\n      this.averagingWindow.value = blendWindow;\n      this.object.material = this.targetMat; // Ping-pong two surface buffers for reading/writing\n\n      var activeMap = this.buffer1Active ? this.progressiveLightMap1 : this.progressiveLightMap2;\n      var inactiveMap = this.buffer1Active ? this.progressiveLightMap2 : this.progressiveLightMap1; // Render the object's surface maps\n\n      var oldBg = this.scene.background;\n      this.scene.background = null;\n      this.renderer.setRenderTarget(activeMap);\n      this.previousShadowMap.value = inactiveMap.texture;\n      this.buffer1Active = !this.buffer1Active;\n      this.renderer.render(this.scene, camera);\n      this.renderer.setRenderTarget(null);\n      this.scene.background = oldBg;\n    }\n  }]);\n  return ProgressiveLightMap;\n}();\nexport { AccumulativeShadows, RandomizedLight, accumulativeContext };","map":{"version":3,"names":["_extends","THREE","React","extend","useThree","useFrame","shaderMaterial","isLight","object","isGeometry","geometry","accumulativeContext","createContext","SoftShadowMaterial","color","Color","blend","alphaTest","opacity","map","DiscardMaterial","AccumulativeShadows","forwardRef","_ref","children","temporal","_ref$frames","frames","_ref$limit","limit","Infinity","_ref$blend","_ref$scale","scale","_ref$opacity","_ref$alphaTest","_ref$color","_ref$colorBlend","colorBlend","_ref$resolution","resolution","_ref$toneMapped","toneMapped","props","_objectWithoutProperties","_excluded","gl","state","scene","camera","gPlane","useRef","gLights","_React$useState","useState","ProgressiveLightMap","_React$useState2","_slicedToArray","plm","useLayoutEffect","configure","current","api","useMemo","lights","Map","Math","max","count","getMesh","reset","clear","material","update","arguments","length","undefined","min","visible","prepare","i","forEach","light","finish","useImperativeHandle","createElement","traverse","ref","Provider","value","receiveShadow","rotation","PI","transparent","depthWrite","progressiveLightMap2","texture","RandomizedLight","_ref2","_ref2$castShadow","castShadow","_ref2$bias","bias","_ref2$mapSize","mapSize","_ref2$size","size","_ref2$near","near","_ref2$far","far","_ref2$frames","_ref2$position","position","_ref2$radius","radius","_ref2$amount","amount","_ref2$intensity","intensity","_ref2$ambient","ambient","_excluded2","_construct","Vector3","_toConsumableArray","parent","useContext","useCallback","l","random","set","MathUtils","randFloatSpread","lambda","acos","phi","cos","abs","sin","concat","group","uuid","delete","Array","from","_","index","key","attach","args","renderer","_this","res","_classCallCheck","buffer1Active","meshes","format","test","navigator","userAgent","HalfFloatType","FloatType","progressiveLightMap1","WebGLRenderTarget","type","encoding","outputEncoding","discardMat","targetMat","MeshPhongMaterial","shininess","fog","previousShadowMap","averagingWindow","onBeforeCompile","shader","vertexShader","slice","bodyStart","fragmentShader","indexOf","replace","uniforms","_createClass","_this2","setRenderTarget","push","_this3","mesh","blendWindow","activeMap","inactiveMap","oldBg","background","render"],"sources":["/home/gog3d/CODE/JS/1-projects/2-react/react-glb-models-viewer/node_modules/@react-three/drei/core/AccumulativeShadows.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport { shaderMaterial } from './shaderMaterial.js';\n\nfunction isLight(object) {\n  return object.isLight;\n}\n\nfunction isGeometry(object) {\n  return !!object.geometry;\n}\n\nconst accumulativeContext = /*#__PURE__*/React.createContext(null);\nconst SoftShadowMaterial = shaderMaterial({\n  color: new THREE.Color(),\n  blend: 2.0,\n  alphaTest: 0.75,\n  opacity: 0,\n  map: null\n}, `varying vec2 vUv;\n   void main() {\n     gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);\n     vUv = uv;\n   }`, `varying vec2 vUv;\n   uniform sampler2D map;\n   uniform vec3 color;\n   uniform float opacity;\n   uniform float alphaTest;\n   uniform float blend;\n   void main() {\n     vec4 sampledDiffuseColor = texture2D(map, vUv);\n     gl_FragColor = vec4(color * sampledDiffuseColor.r * blend, max(0.0, (1.0 - (sampledDiffuseColor.r + sampledDiffuseColor.g + sampledDiffuseColor.b) / alphaTest)) * opacity);\n     #include <tonemapping_fragment>\n     #include <encodings_fragment>\n   }`);\nconst DiscardMaterial = shaderMaterial({}, 'void main() { gl_Position = vec4((uv - 0.5) * 2.0, 1.0, 1.0); }', 'void main() { discard; }');\nconst AccumulativeShadows = /*#__PURE__*/React.forwardRef(({\n  children,\n  temporal,\n  frames = 40,\n  limit = Infinity,\n  blend = 20,\n  scale = 10,\n  opacity = 1,\n  alphaTest = 0.75,\n  color = 'black',\n  colorBlend = 2,\n  resolution = 1024,\n  toneMapped = true,\n  ...props\n}, forwardRef) => {\n  extend({\n    SoftShadowMaterial\n  });\n  const gl = useThree(state => state.gl);\n  const scene = useThree(state => state.scene);\n  const camera = useThree(state => state.camera);\n  const gPlane = React.useRef(null);\n  const gLights = React.useRef(null);\n  const [plm] = React.useState(() => new ProgressiveLightMap(gl, scene, resolution));\n  React.useLayoutEffect(() => {\n    plm.configure(gPlane.current);\n  }, []);\n  const api = React.useMemo(() => ({\n    lights: new Map(),\n    temporal: !!temporal,\n    frames: Math.max(2, frames),\n    blend: Math.max(2, frames === Infinity ? blend : frames),\n    count: 0,\n    getMesh: () => gPlane.current,\n    reset: () => {\n      // Clear buffers, reset opacities, set frame count to 0\n      plm.clear();\n      const material = gPlane.current.material;\n      material.opacity = 0;\n      material.alphaTest = 0;\n      api.count = 0;\n    },\n    update: (frames = 1) => {\n      // Adapt the opacity-blend ratio to the number of frames\n      const material = gPlane.current.material;\n\n      if (!api.temporal) {\n        material.opacity = opacity;\n        material.alphaTest = alphaTest;\n      } else {\n        material.opacity = Math.min(opacity, material.opacity + opacity / api.blend);\n        material.alphaTest = Math.min(alphaTest, material.alphaTest + alphaTest / api.blend);\n      } // Switch accumulative lights on\n\n\n      gLights.current.visible = true; // Collect scene lights and meshes\n\n      plm.prepare(); // Update the lightmap and the accumulative lights\n\n      for (let i = 0; i < frames; i++) {\n        api.lights.forEach(light => light.update());\n        plm.update(camera, api.blend);\n      } // Switch lights off\n\n\n      gLights.current.visible = false; // Restore lights and meshes\n\n      plm.finish();\n    }\n  }), [plm, camera, scene, temporal, frames, blend, opacity, alphaTest]);\n  React.useLayoutEffect(() => {\n    // Reset internals, buffers, ...\n    api.reset(); // Update lightmap\n\n    if (!api.temporal && api.frames !== Infinity) api.update(api.blend);\n  }); // Expose api, allow children to set itself as the main light source\n\n  React.useImperativeHandle(forwardRef, () => api, [api]);\n  useFrame(() => {\n    if ((api.temporal || api.frames === Infinity) && api.count < api.frames && api.count < limit) {\n      api.update();\n      api.count++;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", props, /*#__PURE__*/React.createElement(\"group\", {\n    traverse: () => null,\n    ref: gLights\n  }, /*#__PURE__*/React.createElement(accumulativeContext.Provider, {\n    value: api\n  }, children)), /*#__PURE__*/React.createElement(\"mesh\", {\n    receiveShadow: true,\n    ref: gPlane,\n    scale: scale,\n    rotation: [-Math.PI / 2, 0, 0]\n  }, /*#__PURE__*/React.createElement(\"planeGeometry\", null), /*#__PURE__*/React.createElement(\"softShadowMaterial\", {\n    transparent: true,\n    depthWrite: false,\n    toneMapped: toneMapped,\n    color: color,\n    blend: colorBlend,\n    map: plm.progressiveLightMap2.texture\n  })));\n});\nconst RandomizedLight = /*#__PURE__*/React.forwardRef(({\n  castShadow = true,\n  bias = 0.001,\n  mapSize = 512,\n  size = 5,\n  near = 0.5,\n  far = 500,\n  frames = 1,\n  position = [0, 0, 0],\n  radius = 1,\n  amount = 8,\n  intensity = 1,\n  ambient = 0.5,\n  ...props\n}, forwardRef) => {\n  const gLights = React.useRef(null);\n  const length = new THREE.Vector3(...position).length();\n  const parent = React.useContext(accumulativeContext);\n  const update = React.useCallback(() => {\n    let light;\n\n    if (gLights.current) {\n      for (let l = 0; l < gLights.current.children.length; l++) {\n        light = gLights.current.children[l];\n\n        if (Math.random() > ambient) {\n          light.position.set(position[0] + THREE.MathUtils.randFloatSpread(radius), position[1] + THREE.MathUtils.randFloatSpread(radius), position[2] + THREE.MathUtils.randFloatSpread(radius));\n        } else {\n          let lambda = Math.acos(2 * Math.random() - 1) - Math.PI / 2.0;\n          let phi = 2 * Math.PI * Math.random();\n          light.position.set(Math.cos(lambda) * Math.cos(phi) * length, Math.abs(Math.cos(lambda) * Math.sin(phi) * length), Math.sin(lambda) * length);\n        }\n      }\n    }\n  }, [radius, ambient, length, ...position]);\n  const api = React.useMemo(() => ({\n    update\n  }), [update]);\n  React.useImperativeHandle(forwardRef, () => api, [api]);\n  React.useLayoutEffect(() => {\n    const group = gLights.current;\n    if (parent) parent.lights.set(group.uuid, api);\n    return () => void parent.lights.delete(group.uuid);\n  }, [parent, api]);\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    ref: gLights\n  }, props), Array.from({\n    length: amount\n  }, (_, index) => /*#__PURE__*/React.createElement(\"directionalLight\", {\n    key: index,\n    castShadow: castShadow,\n    \"shadow-bias\": bias,\n    \"shadow-mapSize\": [mapSize, mapSize],\n    intensity: intensity / amount\n  }, /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    attach: \"shadow-camera\",\n    args: [-size, size, size, -size, near, far]\n  }))));\n}); // Based on \"Progressive Light Map Accumulator\", by [zalo](https://github.com/zalo/)\n\nclass ProgressiveLightMap {\n  constructor(renderer, scene, res = 1024) {\n    this.renderer = renderer;\n    this.res = res;\n    this.scene = scene;\n    this.buffer1Active = false;\n    this.lights = [];\n    this.meshes = [];\n    this.object = null; // Create the Progressive LightMap Texture\n\n    const format = /(Android|iPad|iPhone|iPod)/g.test(navigator.userAgent) ? THREE.HalfFloatType : THREE.FloatType;\n    this.progressiveLightMap1 = new THREE.WebGLRenderTarget(this.res, this.res, {\n      type: format,\n      encoding: renderer.outputEncoding\n    });\n    this.progressiveLightMap2 = new THREE.WebGLRenderTarget(this.res, this.res, {\n      type: format,\n      encoding: renderer.outputEncoding\n    }); // Inject some spicy new logic into a standard phong material\n\n    this.discardMat = new DiscardMaterial();\n    this.targetMat = new THREE.MeshPhongMaterial({\n      shininess: 0,\n      fog: false\n    });\n    this.previousShadowMap = {\n      value: this.progressiveLightMap1.texture\n    };\n    this.averagingWindow = {\n      value: 100\n    };\n\n    this.targetMat.onBeforeCompile = shader => {\n      // Vertex Shader: Set Vertex Positions to the Unwrapped UV Positions\n      shader.vertexShader = 'varying vec2 vUv;\\n' + shader.vertexShader.slice(0, -1) + 'vUv = uv; gl_Position = vec4((uv - 0.5) * 2.0, 1.0, 1.0); }'; // Fragment Shader: Set Pixels to average in the Previous frame's Shadows\n\n      const bodyStart = shader.fragmentShader.indexOf('void main() {');\n      shader.fragmentShader = shader.fragmentShader.replace('#include <clipping_planes_pars_fragment>', '#include <clipping_planes_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n');\n      shader.fragmentShader = 'varying vec2 vUv;\\n' + shader.fragmentShader.slice(0, bodyStart) + '\tuniform sampler2D previousShadowMap;\\n\tuniform float averagingWindow;\\n' + shader.fragmentShader.slice(bodyStart - 1, -1) + `\\nvec3 texelOld = texture2D(previousShadowMap, vUv).rgb;\n        gl_FragColor.rgb = mix(texelOld, gl_FragColor.rgb, 1.0/averagingWindow);\n      }`; // Set the Previous Frame's Texture Buffer and Averaging Window\n\n      shader.uniforms.previousShadowMap = this.previousShadowMap;\n      shader.uniforms.averagingWindow = this.averagingWindow;\n    };\n  }\n\n  clear() {\n    this.renderer.setRenderTarget(this.progressiveLightMap1);\n    this.renderer.clear();\n    this.renderer.setRenderTarget(this.progressiveLightMap2);\n    this.renderer.clear();\n    this.lights = [];\n    this.meshes = [];\n    this.scene.traverse(object => {\n      if (isGeometry(object)) {\n        this.meshes.push({\n          object,\n          material: object.material\n        });\n      } else if (isLight(object)) {\n        this.lights.push({\n          object,\n          intensity: object.intensity\n        });\n      }\n    });\n  }\n\n  prepare() {\n    this.lights.forEach(light => light.object.intensity = 0);\n    this.meshes.forEach(mesh => mesh.object.material = this.discardMat);\n  }\n\n  finish() {\n    this.lights.forEach(light => light.object.intensity = light.intensity);\n    this.meshes.forEach(mesh => mesh.object.material = mesh.material);\n  }\n\n  configure(object) {\n    this.object = object;\n  }\n\n  update(camera, blendWindow = 100) {\n    if (!this.object) return; // Set each object's material to the UV Unwrapped Surface Mapping Version\n\n    this.averagingWindow.value = blendWindow;\n    this.object.material = this.targetMat; // Ping-pong two surface buffers for reading/writing\n\n    const activeMap = this.buffer1Active ? this.progressiveLightMap1 : this.progressiveLightMap2;\n    const inactiveMap = this.buffer1Active ? this.progressiveLightMap2 : this.progressiveLightMap1; // Render the object's surface maps\n\n    const oldBg = this.scene.background;\n    this.scene.background = null;\n    this.renderer.setRenderTarget(activeMap);\n    this.previousShadowMap.value = inactiveMap.texture;\n    this.buffer1Active = !this.buffer1Active;\n    this.renderer.render(this.scene, camera);\n    this.renderer.setRenderTarget(null);\n    this.scene.background = oldBg;\n  }\n\n}\n\nexport { AccumulativeShadows, RandomizedLight, accumulativeContext };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}